<?xml version="1.0" encoding="UTF-8"?>
<Worksheet>
<Version major="2018" minor="0"/>
<Label-Scheme value="2" prefix=""/>
<View-Properties presentation="false" autoexpanding_sections="true" UserProfileName="Maple Default Profile" NumericFormat-ApplyInteger="true" NumericFormat-ApplyRational="true" NumericFormat-ApplyExponent="false" editable="true">
</View-Properties>
<MapleNet-Properties prettyprint="3" warnlevel="3" preplot="" helpbrowser="standard" displayprecision="-1" echo="1" unitattributes="&quot;fontweight&quot; = &quot;bold&quot;" imaginaryunit="I" longdelim="true" elisiontermsthreshold="10000" elisiondigitsafter="100" elisiondigitsbefore="100" plotdevice="inline" errorbreak="1" plotoptions="" plotdriver="opengl" quiet="false" elisiontermsbefore="100" elisiontermsafter="100" screenwidth="79" indentamount="4" plotoutput="terminal" screenpixelheight="1080" rtablesize="10" useclientjvm="true" labelwidth="20" postplot="" typesetting="extended" ansi="false" elisiondigitsthreshold="10000" showassumed="1" errorcursor="false" labelling="true" screenheight="25" prompt="&gt; " verboseproc="1" latexwidth="8.0" ShowLabels="true"/>
<Styles>
<Font name="Heading 1" background="[255,255,255]" bold="true" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="18" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Warning" background="[255,255,255]" bold="false" executable="false" family="Courier New" foreground="[0,0,255]" italic="false" opaque="false" readonly="true" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="2D Output" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,255]" italic="false" opaque="false" readonly="true" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Heading 4" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="true" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Line Printed Output" background="[255,255,255]" bold="false" executable="false" family="Courier New" foreground="[0,0,255]" italic="false" opaque="false" readonly="true" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Heading 2" background="[255,255,255]" bold="true" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="16" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Maple Output" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="2D Inert Output" background="[255,255,255]" bold="false" executable="true" family="Times New Roman" foreground="[144,144,144]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Heading 3" background="[255,255,255]" bold="true" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="true" opaque="false" readonly="false" size="14" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Diagnostic" background="[255,255,255]" bold="false" executable="false" family="Courier New" foreground="[40,120,40]" italic="false" opaque="false" readonly="true" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Ordered List 1" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Maple Input" background="[255,255,255]" bold="true" executable="true" family="Courier New" foreground="[120,0,14]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Text Output" background="[255,255,255]" bold="false" executable="false" family="Courier New" foreground="[0,0,255]" italic="false" opaque="false" readonly="true" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Ordered List 2" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Ordered List 3" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Ordered List 4" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Ordered List 5" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Annotation Title" background="[255,255,255]" bold="true" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="18" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Header and Footer" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="10" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="HyperlinkError" background="[255,255,255]" bold="false" executable="false" family="Courier New" foreground="[255,0,255]" italic="false" opaque="false" readonly="true" size="12" subscript="false" superscript="false" underline="true" placeholder="false"/>
<Font name="Atomic Variable" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[175,0,175]" italic="true" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="HyperlinkWarning" background="[255,255,255]" bold="false" executable="false" family="Courier New" foreground="[0,0,255]" italic="false" opaque="false" readonly="true" size="12" subscript="false" superscript="false" underline="true" placeholder="false"/>
<Font name="Dictionary Hyperlink" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[147,0,15]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="true" placeholder="false"/>
<Font name="2D Math" background="[255,255,255]" bold="false" executable="true" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Bullet Item" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Maple Plot" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Annotation Text" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="List Item" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Dash Item" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="2D Input" background="[255,255,255]" bold="false" executable="true" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Error" background="[255,255,255]" bold="false" executable="false" family="Courier New" foreground="[255,0,255]" italic="false" opaque="false" readonly="true" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Title" background="[255,255,255]" bold="true" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="18" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Text" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Normal" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Caption Reference" background="[255,255,255]" bold="true" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Code" background="[255,255,255]" bold="false" executable="false" family="Courier New" foreground="[255,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Maple Input Placeholder" background="[255,255,255]" bold="true" executable="true" family="Courier New" foreground="[200,0,200]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="true"/>
<Font name="Equation Label" background="[255,255,255]" bold="true" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Author" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Font name="Hyperlink" background="[255,255,255]" bold="false" executable="false" family="Times New Roman" foreground="[0,128,128]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="true" placeholder="false"/>
<Font name="Caption Text" background="[255,255,255]" bold="true" executable="false" family="Times New Roman" foreground="[0,0,0]" italic="false" opaque="false" readonly="false" size="12" subscript="false" superscript="false" underline="false" placeholder="false"/>
<Layout name="Heading 1" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="8" spacebelow="4" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Warning" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Heading 4" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Line Printed Output" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="any" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Heading 2" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="8" spacebelow="2" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Maple Output" alignment="centred" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.3" spaceabove="0" spacebelow="0" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Heading 3" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Diagnostic" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="any" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Ordered List 1" alignment="left" bullet="numeric" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="3" spacebelow="3" linebreak="space" pagebreak-before="false" initial="-1" bulletsuffix=""/>
<Layout name="Text Output" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="newline" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Ordered List 2" alignment="left" bullet="alphabetic" firstindent="0" leftmargin="36" rightmargin="0" linespacing="0.0" spaceabove="3" spacebelow="3" linebreak="space" pagebreak-before="false" initial="-1" bulletsuffix=""/>
<Layout name="Ordered List 3" alignment="left" bullet="roman" firstindent="0" leftmargin="72" rightmargin="0" linespacing="0.0" spaceabove="3" spacebelow="3" linebreak="space" pagebreak-before="false" initial="-1" bulletsuffix=""/>
<Layout name="Ordered List 4" alignment="left" bullet="ALPHABETIC" firstindent="0" leftmargin="108" rightmargin="0" linespacing="0.0" spaceabove="3" spacebelow="3" linebreak="space" pagebreak-before="false" initial="-1" bulletsuffix=""/>
<Layout name="Ordered List 5" alignment="left" bullet="ROMAN" firstindent="0" leftmargin="144" rightmargin="0" linespacing="0.0" spaceabove="3" spacebelow="3" linebreak="space" pagebreak-before="false" initial="-1" bulletsuffix=""/>
<Layout name="Annotation Title" alignment="centred" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="12" spacebelow="12" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="HyperlinkError" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="HyperlinkWarning" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Bullet Item" alignment="left" bullet="dot" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="3" spacebelow="3" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Maple Plot" alignment="centred" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="List Item" alignment="left" bullet="indent" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="3" spacebelow="3" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Dash Item" alignment="left" bullet="dash" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="3" spacebelow="3" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Error" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Title" alignment="centred" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="12" spacebelow="12" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Normal" alignment="left" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="0" spacebelow="0" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Layout name="Author" alignment="centred" bullet="none" firstindent="0" leftmargin="0" rightmargin="0" linespacing="0.0" spaceabove="8" spacebelow="8" linebreak="space" pagebreak-before="false" initial="0" bulletsuffix=""/>
<Pencil-style name="Pencil 1" pen-color="[0,0,0]" pen-height="1.0" pen-width="1.0" pen-opacity="1.0"/>
<Pencil-style name="Pencil 2" pen-color="[0,0,255]" pen-height="1.0" pen-width="1.0" pen-opacity="1.0"/>
<Pencil-style name="Pencil 3" pen-color="[0,0,0]" pen-height="3.0" pen-width="3.0" pen-opacity="1.0"/>
<Pencil-style name="Pencil 4" pen-color="[0,0,255]" pen-height="3.0" pen-width="3.0" pen-opacity="1.0"/>
<Pencil-style name="Pencil 5" pen-color="[255,0,0]" pen-height="5.0" pen-width="5.0" pen-opacity="1.0"/>
<Highlighter-style name="Highlighter 5" pen-color="[255,255,0]" pen-height="48.0" pen-width="48.0" pen-opacity="0.8"/>
<Highlighter-style name="Highlighter 3" pen-color="[51,255,0]" pen-height="24.0" pen-width="24.0" pen-opacity="0.8"/>
<Highlighter-style name="Highlighter 4" pen-color="[0,255,255]" pen-height="32.0" pen-width="32.0" pen-opacity="0.8"/>
<Highlighter-style name="Highlighter 1" pen-color="[255,153,255]" pen-height="12.0" pen-width="8.0" pen-opacity="0.8"/>
<Highlighter-style name="Highlighter 2" pen-color="[255,204,0]" pen-height="14.0" pen-width="14.0" pen-opacity="0.8"/>
</Styles>
<Startup-Code startupcode=""/>
<Task-table>
    <Task-category name="&lt;default&gt;"/>
</Task-table>
<Task/>
<Group labelreference="L29" drawlabel="true" applyint="true" applyrational="true" applyexponent="false">
<Input><Text-field style="Text" layout="Normal"><Font encoding="UTF-8">Seule diff\303\251rence avec version 1_5_9_3d: les chemins _pdf_reader et _sumatra_printer. Attention: _sejda_dir n'est pas \303\240 jour.</Font></Text-field>
</Input>
</Group>
<Group hide-output="false" labelreference="L1" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" layout="Normal">LatexTools:=module() </Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">
option package,`Copyright (c) 2017 Martin Courchesne`:

export About, SetModelsDir,GetModelsDir,SetVersionsDir,GetVersionsDir, ProcessLatexFile, ShowAssignments, LatexString, ShowLatex, CreateVersions, GetVersion, SetVersion, IsFirstVersion, CompileLatex, GetPdfReader, SetPdfReader, GetSumatraPrinter, SetSumatraPrinter, GetSejdaConsole, SetSejdaConsole, SplitPdf, OpenPdf, SumatraPrint, SetCurrentFiles, AddToCurrentFiles, GetCurrentFiles, AssociatedPdfFiles:

local AppendToFilename, AssociatedTexFiles, FirstUnmatchedClosingBrace, ParseMultipleStatements, RecursiveSumatraPrint, ResolveMskips, ResolveMrefs, SumatraPrintPdfFile, UnescapeLatex, UnmatchedClosingBrace:
local _modelsdir,_versionsdir,_version, _first_version, _pdf_reader, _sumatra_printer, _sejda_dir, _sejda_console, _current_files, _sejda_split_dir:


<Font foreground="[0,0,255]" encoding="UTF-8"># Chemin des programmes externes: lecteur pdf (actuellement Acrobat reader), Sumatra pour l'impression, Sejda pour le d\303\251coupage.</Font>  

<Font encoding="UTF-8">### \303\200 L'UTILISATEUR: Les 2 lignes qui suivent d\303\251pendent des logiciels install\303\251s sur l'ordinateur et peuvent \303\252tre modif\303\251es au besoin. ###
</Font>_pdf_reader := &quot;C:/Program Files (x86)/Adobe/Acrobat DC/Acrobat/AcroRd32.exe&quot;:
_sumatra_printer := &quot;C:/Program Files (x86)/SumatraPDF/SumatraPDF.exe&quot;:

<Font encoding="UTF-8"># Le bloc suivant trouve le plus r\303\251cent r\303\251pertoire de Sejda (version command-line) et en assigne le chemin \303\240 la variable </Font>_sejda_dir
 _sejda_dir:=&quot;C:/Program Files (x86)/Sejda/&quot;:
 if not FileTools:-Exists(_sejda_dir) then
   _sejda_console:=NULL:
 else
   _sejda_console := cat(_sejda_dir, 
                         ListTools:-SelectLast(proc(str) StringTools:-RegMatch(&quot;^sejda-console&quot;, str) end proc, sort(FileTools:-ListDirectory(_sejda_dir),lexorder)),
                         &quot;/bin/sejda-console.bat&quot;):
 end if:
 if not FileTools:-Exists(_sejda_console) then
   _sejda_console:=NULL:
 end if:


<Font foreground="[0,0,255]" encoding="UTF-8"># Valeur par d\303\251faut des variables internes</Font>

_sejda_split_dir := &quot;split_pdf&quot;:
_current_files := NULL:
_version := 0:
_first_version:=true:


<Font foreground="[0,0,255]" encoding="UTF-8"># Proc\303\251dures pour interagir avec LatexTools</Font>

About:=proc()
<Font encoding="UTF-8">  return &quot;LatexTools version 1.5.9.3\134nAuthor: Martin Courchesne&quot;:</Font>
end proc:

SetModelsDir := proc(mydir::string)
  _modelsdir := FileTools:-AbsolutePath(mydir):
end proc:
GetModelsDir := proc()
  <Font encoding="UTF-8"># les mod\303\250les latex sont plac\303\251s par d\303\251faut dans le m\303\252me r\303\251pertoire que la feuille de travail Maple</Font>
  if not assigned(_modelsdir) then _modelsdir:=currentdir(): end if:
  return _modelsdir:
end proc:

SetVersionsDir := proc(mydir::string)
  _versionsdir:=FileTools:-AbsolutePath(mydir):
end proc:
GetVersionsDir := proc()
  <Font encoding="UTF-8"># les fichiers .tex cr\303\251\303\251s seront plac\303\251s par d\303\251faut dans le sous-r\303\251pertoire versions_latex</Font>
  if not assigned(_versionsdir) then _versionsdir:=FileTools:-AbsolutePath(&quot;versions_latex&quot;): end if:
  if not(FileTools[Exists](_versionsdir)) then FileTools[MakeDirectory](_versionsdir): end if:
  return _versionsdir:
end proc:

SetVersion := proc(n::integer)
  _version:=n:
end proc:
GetVersion := proc()
  return _version:
end proc:

IsFirstVersion := proc()
   if assigned(_first_version) then
     return _first_version:
   else
     return true:
   end if:
end proc:

GetPdfReader:=proc()
  return _pdf_reader:
end proc:
SetPdfReader:=proc(reader_path)
  _pdf_reader:=reader_path:
end proc:

GetSumatraPrinter:=proc()
  return _sumatra_printer:
end proc:
SetSumatraPrinter:=proc(printer_path)
  _sumatra_printer:=printer_path:
end proc:

GetSejdaConsole:=proc()
  return _sejda_console:
end proc:
SetSejdaConsole:=proc(sejda_path)
  _sejda_console := sejda_path:
end proc:

SetCurrentFiles:=proc(files::seq(string))
  _current_files:=files:
end proc:

AddToCurrentFiles:=proc(files::seq(string))
  _current_files:=_current_files, files:
end proc:

GetCurrentFiles:=proc()
  return _current_files:
end proc:


<Font foreground="[0,0,255]"># Compilation d'un fichier Latex</Font>

 CompileLatex := proc(files::seq(string):=AssociatedTexFiles(GetCurrentFiles()), {pdflatex_options::string:=&quot;&quot;,target_directory::string:=currentdir()})
   # This procedure expects one or more strings, each containing the name of a file to be compiled 
   local file, abs_file, old_dir, abs_dir, output, command, return_value:
   output := NULL:
   old_dir := currentdir():
   abs_dir:=FileTools[AbsolutePath](target_directory):
   
   for file in [files] do
     abs_file:=FileTools:-AbsolutePath(file,abs_dir):
     currentdir(FileTools:-ParentDirectory(abs_file)):
     print(currentdir()):
     command:=cat(&quot;pdflatex &quot;, pdflatex_options, &quot; -interaction=nonstopmode &quot;, FileTools:-Filename(abs_file)):
     print(command):
     return_value := ssystem(command):
     output:=output,return_value:
     if return_value[1] &lt;&gt; 0 then 
<Font encoding="UTF-8">       print(cat(&quot;LA COMPILATION DU FICHIER SUIVANT A \303\211CHOU\303\211: &quot;, file)):
</Font>       print(return_value[2]): 
     end if:
   od;
   currentdir(old_dir):
   
   return output:
 end proc:


<Font foreground="[0,0,255]"># Ouverture d'un fichier pdf</Font>

OpenPdf := proc(files::seq(string):=AssociatedPdfFiles(GetCurrentFiles()), {directory::string:=currentdir()})
  # La commande <Font encoding="UTF-8">system[launch] ne fonctionne pas si le fichier \303\240 ouvrir est sp\303\251cifi\303\251 \303\240 l'aide d'un path contenant des espaces. C'est pourquoi on utilise currentdir() pour invoquer le .exe directement dans le r\303\251pertoire du fichier pdf.</Font>
  local abs_file, pdf_file, old_dir, abs_dir:
  old_dir:=currentdir():
  abs_dir:=FileTools:-AbsolutePath(directory):
  for pdf_file in [files] do
    abs_file:=FileTools:-AbsolutePath(pdf_file,abs_dir):
    currentdir(FileTools:-ParentDirectory(abs_file)):
    system[launch](cat(_pdf_reader, &quot; &quot;,FileTools:-Filename(abs_file))):
  od:
  currentdir(old_dir):
end proc:


<Font foreground="[0,0,255]" encoding="UTF-8"># D\303\251coupage d'un fichier pdf</Font>

SplitPdf := proc(pdf_file::string, split_by_every::integer, target_dir::string:=_sejda_split_dir)
  local command:
  
  if _sejda_console=NULL then
    error &quot;Le fichier <Font encoding="UTF-8">sejda-console.bat n'a pas \303\251t\303\251 trouv\303\251. Utilisez SetSejdaConsole() pour sp\303\251cifier le chemin d'acc\303\250s, par exemple SetSejdaConsole(\134&quot;C:/Program Files (x86)/Sejda/sejda-console-3.0.0.M10/bin/sejda-console.bat\134&quot;).&quot;:</Font>
  end if:

  _sejda_split_dir := target_dir:
  if not(FileTools[Exists](target_dir)) then FileTools[MakeDirectory](target_dir): end if:

<Font encoding="UTF-8">  command := cat(&quot;\134&quot;&quot;, _sejda_console, &quot;\134&quot; splitbyevery -f \134&quot;&quot;, pdf_file, &quot;\134&quot; -o &quot;, target_dir, &quot; -n &quot;, split_by_every, &quot; -j overwrite&quot;):
</Font>  system[launch](command):
  return command:
end proc:


<Font foreground="[0,0,255]"># Impression d'un fichier PDF</Font>

SumatraPrintPdfFile := proc(pdf_file, {sleep::numeric:=3})
<Font encoding="UTF-8">  # Commande locale qui imprime un fichier, s'il s'agit d'un pdf. Le sleep sert, quand on imprime plusieurs fichiers, \303\240 ce qu'ils arrivent dans le bon ordre \303\240 l'imprimante.
</Font>  local command:
  if (FileTools:-Extension(pdf_file) = &quot;pdf&quot;) then
    command := cat(<Font encoding="UTF-8">&quot;\134&quot;&quot;, </Font>_sumatra_printer, &quot;<Font encoding="UTF-8">\134&quot; -silent -print-to-default \134&quot;&quot;, pdf_file,&quot;\134&quot;&quot;):
</Font>    system[launch](command):
    print(command):
    Threads:-Sleep(sleep):
  end if:
end proc:

RecursiveSumatraPrint := proc(files::list(string), path::string:=&quot;.&quot;)
<Font encoding="UTF-8">  # Appel\303\251e par SumatraPrint quand on choisit l'option recursive=true.
</Font>  local pdf_file, dir, listing, myfile:
  for pdf_file in map(proc(str) cat(path, &quot;/&quot;, str) end proc, files) do 
    if not(FileTools:-IsDirectory(pdf_file)) then
      SumatraPrintPdfFile(pdf_file):
    end if:
  end do:
  for dir in map(proc(str) cat(path, &quot;/&quot;, str) end proc, files) do
    if FileTools:-IsDirectory(dir) then
      <Font encoding="UTF-8"># Si un des arguments fournis est un r\303\251pertoire</Font> 
      listing := sort(FileTools:-ListDirectory(dir), length):
      RecursiveSumatraPrint(listing, dir):
    end if:
  od:
end proc:

SumatraPrint := proc(files::seq(string),{recursive::boolean:=false})
<Font encoding="UTF-8">  # Envoie une liste de fichiers pdf \303\240 l'imprimante. Les autres fichiers sont ignor\303\251s. Si on passe un r\303\251pertoire en argument, tous ses fichiers seront envoy\303\251s \303\240 l'impression. Si on choisit l'option recursive=true, les pdf des sous-r\303\251pertoires seront imprim\303\251s aussi. (Attention, c'est un appel r\303\251cursif, donc les sous-sous-sous-r\303\251pertoires seront explor\303\251s aussi!)</Font>
  local command, pdf_file, myfile, listing:

<Font encoding="UTF-8">  # Comportement par d\303\251faut si aucun argument n'est fourni
</Font>  if _npassed = 0 then
    if FileTools:-Exists(_sejda_split_dir) and numelems(FileTools:-ListDirectory(_sejda_split_dir)) &gt; 0  then
      ###print(cat(&quot;SumatraPrint of &quot; , _sejda_split_dir)): 
      SumatraPrint(_sejda_split_dir):
    else
      SumatraPrint(AssociatedPdfFiles(GetCurrentFiles())):
    end if:
  end if:

  for pdf_file in [files] do 
    if not(FileTools:-IsDirectory(pdf_file)) then
      SumatraPrintPdfFile(pdf_file):
    end if:
  end do:
  for pdf_file in [files] do
    if FileTools:-IsDirectory(pdf_file) then
      <Font encoding="UTF-8"># Si un des arguments fournis est un r\303\251pertoire</Font> 
      ###print(cat(&quot;Printing directory... &quot;, pdf_file)):
      listing := sort(FileTools:-ListDirectory(pdf_file), length):
      if recursive and numelems(listing)&gt;0 then
        RecursiveSumatraPrint(listing, pdf_file):
      else
        for myfile in listing do
          SumatraPrintPdfFile(cat(pdf_file, &quot;/&quot;, myfile)):
        end do:
      end if:
    end if:
  od:
end proc:



<Font foreground="[0,0,255]"># Manipulation de noms de fichiers</Font>

AssociatedTexFiles:=proc(files::seq(string))
  # Remplace l'extension des noms de fichiers par &quot;.tex&quot;.
  local file, pdf_files:
  pdf_files:=NULL:
  use FileTools in
    for file in [files] do
      pdf_files:=pdf_files,cat(ParentDirectory(file),kernelopts(dirsep),Basename(file),&quot;.tex&quot;):
    od:
  end use:
end proc:

AssociatedPdfFiles:=proc(files::seq(string))
  # Remplace l'extension des noms de fichiers par &quot;.pdf&quot;.
  local file, pdf_files:
  pdf_files:=NULL:
  use FileTools in
    for file in [files] do
      pdf_files:=pdf_files,cat(ParentDirectory(file),kernelopts(dirsep),Basename(file),&quot;.pdf&quot;):
    od:
  end use:
end proc:
</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"> AppendToFilename:=proc(filename,addendum)
   # Ajoute au nom d'un fichier, sans modifier son extension. Par exemple, AppendToFilename(&quot;toto.txt&quot;, &quot;_1&quot;) retourne &quot;toto_1.txt&quot;.</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">   cat(FileTools:-Basename(filename),addendum,&quot;.&quot;,FileTools:-Extension(filename)):</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"> end proc:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">

<Font foreground="[0,0,255]" encoding="UTF-8"># Lecture de code latex contenant les commandes sp\303\251ciales \134Maple (ou \134Mref), \134Mskip, \134Monce</Font>
</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">use FileTools[Text],StringTools in</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"> </Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"> LatexString:=proc(expr:=&quot;&quot;)</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">    # Takes as arguments a mathematical expression and returns a string of LaTeX code (generated by Maple)</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">    # If expr is already a string, it remains unchanged
    if type(expr,'string') then return expr:
    else return latex(expr,output=string):
    end if:
  end proc:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">
UnescapeLatex := proc(mystring::string)
<Font encoding="UTF-8">  # Enl\303\250ve le \134 devant les caract\303\250res d'\303\251chappement latex, par exemple ma\134_variable devient ma_variable
</Font>  RegSubs(<Font encoding="UTF-8">&quot;\134\134\134\134([&amp;%$#_{}~^\134\134])&quot; = &quot;\134\1341&quot;</Font>,mystring);
end proc:

ParseMultipleStatements := proc(inputstr::string)
<Font encoding="UTF-8">  #Lit et ex\303\251cute un string contenant du code Maple. On retourne la valeur de la derni\303\250re expression \303\251valu\303\251e. Tir\303\251 de l'Aide Maple sur 'parse'
</Font>  local _n, result:
  result:=&quot;&quot;:

  _n:=0:
  while _n &lt; length(inputstr) do
    result:=parse(inputstr, 'lastread' = '_n', 'offset' = _n, statement);
  od:

  return result:
end proc:

FirstUnmatchedClosingBrace := proc(str)
<Font encoding="UTF-8">  # Quand il y a un &quot;\134Maple{&quot; dans le document latex, cette commande trouve la position du &quot;}&quot; correspondant 
</Font>  local firstopening, firstclosing:

  firstopening:=FirstFromLeft( &quot;{&quot;, str ):
  firstclosing:=FirstFromLeft( &quot;}&quot;, str ):

  if ((firstopening=0) or (firstclosing &lt; firstopening)) then return firstclosing:
  else return firstopening + UnmatchedClosingBrace(substring(str, firstopening+1..length(str)) , 1):
  end if:
end proc:

UnmatchedClosingBrace := proc(str,n)
  # The index n tells us how many closing braces we must discard (level of recursion)
  local firstopening, firstclosing:

  firstopening:=FirstFromLeft( &quot;{&quot;, str ):
  firstclosing:=FirstFromLeft( &quot;}&quot;, str ):

  if ((firstopening=0) or (firstclosing &lt; firstopening)) then 
    if n=0 then return firstclosing:
    else return firstclosing + UnmatchedClosingBrace(substring(str, firstclosing+1..length(str)) , n-1):
  end if:

  else return firstopening + UnmatchedClosingBrace(substring(str, firstopening+1..length(str)) , n+1):
  end if:
end proc:



ResolveMskips:=proc(texdoc)
<Font encoding="UTF-8">   # The Latex document to be read may contain the special command &quot;\134Mskip{}&quot;, where the contents of the braces will be ignored by LatexTools commands. Si on cr\303\251e plusieurs versions, dans toutes les versions sauf la premi\303\250re, les &quot;\134Monce&quot; seront interpr\303\251t\303\251s comme des &quot;\134Mskip&quot;.</Font></Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">   local doc_split, output, i, chunk, resume_at, keep_me, log_fd:
   
   if length(texdoc)=0 then
     return &quot;&quot;:
   end if:
</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">   if IsFirstVersion() then    
     doc_split := [RegSplit(&quot;<Font encoding="UTF-8">\134\134\134\134Mskip{&quot;, </Font>texdoc)]:
   else
     doc_split := [RegSplit(&quot;<Font encoding="UTF-8">\134\134\134\134Monce{|\134\134\134\134Mskip{&quot;, </Font>texdoc)]:
   end if:
</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">   output := doc_split[1]:

   #log_fd := Open(_log_file, append):</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">   for i from 2 to nops(doc_split) do</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">     chunk := doc_split[i]:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">     resume_at := FirstUnmatchedClosingBrace(chunk) + 1:
     #WriteString(cat(&quot;skipped: &quot;, substring(chunk, 1..resume_at-2)), log_fd):</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">     keep_me := substring(chunk, resume_at..Length(chunk));</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">     output:=cat(output, keep_me):</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">   od;
   #Close(log_fd):
   return output:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"> end proc:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">

ResolveMrefs:=proc(corps)
   <Font encoding="UTF-8"># The Latex document to be read may contain the special command &quot;\134Mref{}&quot;, or &quot;\134Maple{}&quot;, </Font>where the contents of the braces will evaluated by Maple and replaced by a Latex string that represents the value of the expression evaluated last. If the contents of the braces end with a whitespace character, they are replaced by the empty string.  <Font encoding="UTF-8">Si on cr\303\251e plusieurs versions, dans seulement la premi\303\250re version, les &quot;\134Monce&quot; seront interpr\303\251t\303\251s comme des &quot;\134Maple&quot;.</Font></Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">   local corps_split,output,i,chunk,fin_var,str1,str2:

   if length(corps)=0 then
     return &quot;&quot;:
   end if:

   if IsFirstVersion() then</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">     <Font encoding="UTF-8">corps_split:=[RegSplit(&quot;\134\134\134\134Monce{|\134\134\134\134Mref{|\134\134\134\134Maple{</Font>&quot;,corps)]:
   else
     <Font encoding="UTF-8">corps_split:=[RegSplit(&quot;\134\134\134\134Mref{</Font>|<Font encoding="UTF-8">\134\134\134\134Maple{</Font>&quot;,corps)]:
   end if:
</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">   output:=corps_split[1]:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">   for i from 2 to nops(corps_split) do</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">     chunk:=corps_split[i]:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">     fin_var:=FirstUnmatchedClosingBrace(chunk) - 1:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">     str1:=LatexString(ParseMultipleStatements(UnescapeLatex(substring(chunk, 1 .. fin_var))));</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">     str2:=substring(chunk,fin_var+2..Length(chunk));</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">     output:=cat(output,str1,str2):</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">   od;
   return output:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"> end proc:

ProcessLatexFile := proc(filename, outputfile::string:=AppendToFilename(filename, &quot;_Mrefs&quot;), {version::integer:=0})
<Font encoding="UTF-8"> # Lit un fichier latex (ou m\303\252me .txt) et ignore le contenu des &quot;\134Mskip&quot;, puis \303\251value le contenu des &quot;\134Maple&quot;, &quot;\134Mref&quot; et &quot;\134Monce&quot; et le remplace par la valeur de l'expression. On peut mettre plusieurs expressions termin\303\251es par &quot;:&quot; ou &quot;;&quot; dans un m\303\252me &quot;\134Maple&quot;: seule la valeur de la derni\303\250re expression sera ins\303\251r\303\251e dans le document latex. Truc int\303\251ressant: si on laisse plus d'un espace blanc \303\240 la fin du code Maple, comme &quot;\134Maple{2+2:  }&quot;, alors l'expression est \303\251valu\303\251e par Maple mais rien n'est \303\251crit dans le document Maple. 
</Font> local source_file, source_str, entete, corps, target_file:
  
 SetVersion(version):
 _first_version:=true:
 source_file:=Open(filename):</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"> try
   source_str:=ResolveMrefs(ResolveMskips(ReadFile(source_file))):
 finally</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">   Close(source_file):
 end try:
</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"> target_file:=Open(outputfile,create=true,overwrite=true);</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"> WriteString(target_file,source_str):
 Close(target_file):

 SetCurrentFiles(FileTools:-AbsolutePath(outputfile)):
end proc:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"> 

  
<Font foreground="[0,0,255]" encoding="UTF-8"># Pour cr\303\251er plusieurs versions d'un m\303\252me document Latex (o\303\271 les valeurs calcul\303\251es par Maple peuvent diff\303\251rer d'une version \303\240 l'autre)</Font></Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"></Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">ShowAssignments:=proc(serie,vars)
<Font encoding="UTF-8">  # Montre les assignations de variables effectu\303\251es par la proc\303\251dure InitializeVersion pour une plage de num\303\251ros de s\303\251rie
</Font></Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  local serie_k,i,serie_init,serie_fin:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  </Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  if type(serie,integer) then</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">    serie_init:=serie: serie_fin:=serie:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  else</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">    serie_init:=lhs(serie): serie_fin:=rhs(serie):</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  end if:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"></Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  for serie_k from serie_init to serie_fin do</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  print(cat(&quot;Serie &quot;,serie_k));    </Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"></Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  InitializeVersion(serie_k):</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"></Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  for i from 1 to nops(vars) do</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">      print(cat(vars[i],&quot;=&quot;,eval(vars[i])));</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  od:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  print(&quot;************&quot;);</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  od: 
<Font encoding="UTF-8">  # On retourne le nombre de variables \303\251valu\303\251es
</Font>  return serie_fin-serie_init+1:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">end proc: </Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">
</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">ShowLatex:=proc(serie,vars)
  <Font encoding="UTF-8"># Montre le code latex g\303\251n\303\251r\303\251 par Maple pour des variables initialis\303\251es dans InitializeVersion, pour une plage de num\303\251ros de s\303\251rie</Font></Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  local serie_k,i,serie_init,serie_fin:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  </Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  if type(serie,integer) then</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">    serie_init:=serie: serie_fin:=serie:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  else</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">    serie_init:=lhs(serie): serie_fin:=rhs(serie):</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  end if:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"></Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  for serie_k from serie_init to serie_fin do</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  print(cat(&quot;Serie &quot;,serie_k));    </Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"></Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  InitializeVersion(serie_k):</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"></Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  for i from 1 to nops(vars) do</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">      print(cat(vars[i],&quot;-&gt;&quot;,LatexString(eval(vars[i]))));</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  od:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  print(&quot;************&quot;);</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  od:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">end proc: </Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">
</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">CreateVersions:=proc(series_range, sources::seq(string))
<Font encoding="UTF-8"> # Pour cr\303\251er des versions d'une s\303\251rie de documents Latex (comme le questionnaire et le solutionnaire d'un devoir al\303\251atoire)
 # Cette proc\303\251dure doit remplacer CreateHomework
</Font>
<Font encoding="UTF-8"> # Pour cr\303\251er une seule version d'un devoir, on peut passer un entier en param\303\250tre ou utiliser </Font>ProcessLatexFile
<Font encoding="UTF-8"> # La proc\303\251dure s'attend \303\240 recevoir un nombre quelconque de noms de fichiers (format string) apr\303\250s la variable series_range. Par exemple, on peut appeler CreateVersions(101..120,&quot;questions.tex&quot;,&quot;reponses.tex&quot;)
</Font>
<Font encoding="UTF-8"> # La valeur retourn\303\251e est un liste des fichiers latex cr\303\251\303\251s</Font></Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"> </Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"> local i, source, target, targets, source_file, source_str, tete, corps, pied, target_file, parsed_file, serie:
 local premier_travail,dernier_travail,versions_range:

<Font encoding="UTF-8"> # targets gardera en m\303\251moire la liste de tous les fichiers .tex cr\303\251\303\251s.
</Font> targets:=NULL:
</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"> if type(series_range,'range') then  </Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">   premier_travail:=lhs(series_range):</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">   dernier_travail:=rhs(series_range):
   versions_range:=cat(&quot;_&quot;,premier_travail,&quot;_&quot;,dernier_travail):</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"> else </Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">   premier_travail:=series_range:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">   dernier_travail:=series_range:
   versions_range:=cat(&quot;_&quot;,premier_travail):</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"> end if;
</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">SetCurrentFiles(NULL):

try
<Font encoding="UTF-8"># On cr\303\251e les fichiers qui contiendront les versions latex
</Font>for i from 1 to numelems([sources]) do
 
<Font encoding="UTF-8"># Message d'erreur si 1 seul argument \303\240 la proc\303\251dure?
</Font>  
<Font encoding="UTF-8">  # On lit d'abord les fichiers mod\303\250les</Font>
  source:=FileTools:-AbsolutePath([sources][i],GetModelsDir()):</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  source_file:=Open(source):
  try</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">    source_str:=ReadFile(source_file):
  finally</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">    Close(source_file):
  end try:

  parsed_file:=[<Font encoding="UTF-8">RegSplit(&quot;\134\134\134\134begin{document}|\134\134\134\134end{document}&quot;,source_str)]:
</Font>
  ### print(cat(&quot;File parsed: &quot;, sources[i])): ###DEL
  
  #################### Should I raise an exception if numelems(parsed_file)&lt;=1 (invalid Latex document) ? ###############</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  tete:=ResolveMrefs(ResolveMskips(parsed_file[1])):</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  corps[i]:=parsed_file[2]:
  if numelems(parsed_file) &gt; 2 then
    pied[i]:=parsed_file[3]:
  else pied[i]:=&quot;&quot;:
  end if:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"></Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"><Font encoding="UTF-8"># On se pr\303\251pare les fichiers latex qui vont contenir les versions</Font></Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  target:=cat(GetVersionsDir(),kernelopts(dirsep),AppendToFilename(source,versions_range));</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  target_file[i]:=Open(target,create=true,overwrite=true);
  targets:=targets,target:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">  WriteString(target_file[i],tete):</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"><Font encoding="UTF-8">  WriteString(target_file[i],&quot;\134\134begin{document}&quot;):
</Font> 
<Font encoding="UTF-8">  #On ajoute le fichier \303\240 la liste des fichiers actuels
</Font>  AddToCurrentFiles(target):
od:
</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"><Font encoding="UTF-8"># C'est parti: on cr\303\251e les versions en appelant la proc\303\251dure &quot;InitializeVersion&quot;</Font></Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"> _first_version:=true:
 for serie from premier_travail to dernier_travail do
   SetVersion(serie):
   
   if assigned(InitializeVersion) then InitializeVersion(serie): end if:

   for i from 1 to numelems([sources]) do
       
     WriteString(target_file[i],ResolveMrefs(ResolveMskips(corps[i]))):

     ### print(cat(&quot;Body written: version &quot;, serie, &quot; , file &quot;, sources[i])): ###DEL
</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">     if (serie &lt;&gt; dernier_travail) then
     <Font encoding="UTF-8"># On \303\251crit le code latex qui s\303\251pare deux versions entre elles</Font>
       
         if StringTools:-RegMatch(<Font encoding="UTF-8">&quot;\134\134newpage&quot;</Font>,pied[i]) or StringTools:-RegMatch(<Font encoding="UTF-8">&quot;\134\134pagebreak&quot;</Font>,pied[i]) then
<Font encoding="UTF-8">         # Si le document source sp\303\251cifie un s\303\251parateur de versions qui inclut un saut de page
</Font>           WriteString(target_file[i],ResolveMrefs(ResolveMskips(pied[i])))
         else
<Font encoding="UTF-8">           # Si, pour une raison obscure, on ne voulait pas de \134newpage entre 2 versions, il faudrait mettre un %\134newpage dans le pied de page latex (apr\303\250s \134end{document})</Font></Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">           WriteString(target_file[i]<Font encoding="UTF-8">,cat(&quot;\134n\134n\134\134newpage\134n\134n&quot;,</Font>ResolveMrefs(ResolveMskips(pied[i])))):</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">         end if:
    else
      WriteString(target_file[i]<Font encoding="UTF-8">,&quot;\134\134end{document}&quot;):</Font></Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">    end if:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"></Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">   od:

   if assigned(FinalizeVersion) then FinalizeVersion(serie): end if:
   _first_version:=false:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"> od:
finally
 for i from 1 to numelems([sources]) do
   if FileTools:-IsOpen(target_file[i]) then Close(target_file[i]) end if:
 od:
 _first_version:=true:
end try:

<Font encoding="UTF-8"> # On retourne un tableau de strings contenant le nom des fichiers .tex cr\303\251\303\251s
</Font> return targets:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">end proc:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"></Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal"></Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">end use:</Text-field><Text-field prompt="&gt; " style="Maple Input" layout="Normal">end module:</Text-field>
</Input>
</Group>
<Group hide-input="false" hide-output="false" labelreference="L26" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" layout="Normal">with(LatexTools);</Text-field>
</Input>
</Group>
<Group hide-input="false" hide-output="false" labelreference="L25" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" layout="Normal">mylibdir := cat(kernelopts(mapledir), kernelopts(dirsep), &quot;lib&quot;);</Text-field>
</Input>
</Group>
<Group hide-input="false" hide-output="false" labelreference="L23" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" layout="Normal">savelibname:=cat(currentdir(), kernelopts(dirsep), &quot;MC_Packages.mla&quot;);
</Text-field>
</Input>
</Group>
<Group labelreference="L21" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" layout="Normal"></Text-field>
</Input>
</Group>
<Group labelreference="L22" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" layout="Normal">#LibraryTools:-Create(savelibname);</Text-field>
</Input>
</Group>
<Group hide-output="false" labelreference="L27" drawlabel="true" applyint="true" applyrational="true" applyexponent="false">
<Input><Text-field prompt="&gt; " style="Maple Input" layout="Normal">#LibraryTools:-Delete(savelibname);</Text-field>
</Input>
</Group>
<Group labelreference="L24" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" layout="Normal">LibraryTools:-Save('LatexTools', savelibname);</Text-field>
</Input>
</Group>
<Group labelreference="L2" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" layout="Normal"></Text-field>
</Input>
</Group>
<Group hide-input="false" labelreference="L3" drawlabel="true">
<Input><Text-field prompt="&gt; " style="Maple Input" layout="Normal">currentdir();</Text-field>
</Input>
</Group>
<Group hide-input="false" hide-output="false" labelreference="L35" drawlabel="true" applyint="true" applyrational="true" applyexponent="false">
<Input><Text-field prompt="&gt; " style="Maple Input" layout="Normal"></Text-field>
</Input>
</Group>
<Group labelreference="L38" drawlabel="true" applyint="true" applyrational="true" applyexponent="false">
<Input><Text-field prompt="&gt; " style="Maple Input" layout="Normal"></Text-field>
</Input>
</Group>
</Worksheet>